#!/usr/bin/env python3
"""
Script de prueba para verificar que las detecciones de YOLO funcionan correctamente
"""
import sys
import os
import cv2
import numpy as np
from ultralytics import YOLO

def test_yolo_detection():
    """Prueba b√°sica de detecci√≥n YOLO"""
    print("üß™ Iniciando prueba de detecci√≥n YOLO...")
    
    try:
        # Cargar modelo YOLO
        print("üì¶ Cargando modelo YOLO...")
        model = YOLO("yolov8n.pt")  # Modelo ligero para pruebas
        print("‚úÖ Modelo cargado exitosamente")
        
        # Crear una imagen de prueba con formas simples
        print("üñºÔ∏è Creando imagen de prueba...")
        test_image = np.zeros((480, 640, 3), dtype=np.uint8)
        
        # Dibujar un rect√°ngulo que simule un objeto
        cv2.rectangle(test_image, (100, 200), (200, 350), (255, 255, 255), -1)
        cv2.rectangle(test_image, (400, 100), (550, 250), (128, 128, 128), -1)
        
        # Guardar imagen de prueba
        cv2.imwrite("test_image.jpg", test_image)
        print("üíæ Imagen de prueba guardada como 'test_image.jpg'")
        
        # Ejecutar detecci√≥n
        print("üîç Ejecutando detecci√≥n...")
        results = model.predict(
            source=test_image,
            conf=0.25,
            classes=[0],  # Solo personas
            save=False,
            show=False,
            verbose=False
        )
        
        # Procesar resultados
        detections_found = 0
        if results and len(results) > 0:
            result = results[0]
            if result.boxes is not None:
                detections_found = len(result.boxes)
                print(f"üìä Detecciones encontradas: {detections_found}")
                
                for i, box in enumerate(result.boxes):
                    x1, y1, x2, y2 = box.xyxy[0].tolist()
                    conf = float(box.conf[0])
                    cls = int(box.cls[0])
                    print(f"  Detection {i}: bbox=({x1:.1f},{y1:.1f},{x2:.1f},{y2:.1f}) conf={conf:.3f} cls={cls}")
            else:
                print("üìä No se encontraron detecciones")
        else:
            print("‚ùå Error: No se obtuvieron resultados del modelo")
            
        return detections_found > 0

    except Exception as e:
        print(f"‚ùå Error probando imagen: {e}")
        return False

def check_cuda_availability():
    """Verificar disponibilidad de CUDA"""
    print("\nüñ•Ô∏è Verificando disponibilidad de CUDA...")
    
    try:
        import torch
        cuda_available = torch.cuda.is_available()
        
        if cuda_available:
            device_count = torch.cuda.device_count()
            current_device = torch.cuda.current_device()
            device_name = torch.cuda.get_device_name(current_device)
            print(f"‚úÖ CUDA disponible: {device_count} dispositivo(s)")
            print(f"üéØ Dispositivo actual: {current_device} ({device_name})")
        else:
            print("‚ö†Ô∏è CUDA no est√° disponible, usando CPU")
            
        return cuda_available
        
    except ImportError:
        print("‚ùå PyTorch no est√° instalado")
        return False
    except Exception as e:
        print(f"‚ùå Error verificando CUDA: {e}")
        return False

def test_config_file():
    """Verificar archivo de configuraci√≥n"""
    print("\nüìÑ Verificando archivo de configuraci√≥n...")
    
    try:
        import json
        
        if os.path.exists("config.json"):
            with open("config.json", "r") as f:
                config = json.load(f)
            
            camaras = config.get("camaras", [])
            print(f"‚úÖ Config cargado: {len(camaras)} c√°maras configuradas")
            
            for i, cam in enumerate(camaras):
                ip = cam.get("ip", "N/A")
                confianza = cam.get("confianza", "N/A")
                modelos = cam.get("modelos", [])
                fps_config = cam.get("fps_config", {})
                
                print(f"  C√°mara {i+1}: {ip}")
                print(f"    Confianza: {confianza}")
                print(f"    Modelos: {modelos}")
                print(f"    FPS: Visual={fps_config.get('visual_fps', 'N/A')}, Detecci√≥n={fps_config.get('detection_fps', 'N/A')}")
            
            return True
        else:
            print("‚ùå Archivo config.json no encontrado")
            return False
            
    except Exception as e:
        print(f"‚ùå Error verificando config: {e}")
        return False

def test_model_files():
    """Verificar archivos de modelos"""
    print("\nüß† Verificando archivos de modelos...")
    
    model_paths = {
        "YOLO b√°sico": "yolov8n.pt",
        "YOLO mediano": "yolov8m.pt", 
        "Embarcaciones": "core/models/best.pt"
    }
    
    available_models = 0
    
    for name, path in model_paths.items():
        if os.path.exists(path):
            print(f"‚úÖ {name}: {path}")
            available_models += 1
        else:
            print(f"‚ùå {name}: {path} (no encontrado)")
    
    if available_models == 0:
        print("‚ö†Ô∏è No se encontraron modelos locales, se descargar√°n autom√°ticamente")
        return True  # YOLO descarga autom√°ticamente
    
    return available_models > 0

def create_sample_config():
    """Crear archivo de configuraci√≥n de ejemplo"""
    print("\nüìù Creando configuraci√≥n de ejemplo...")
    
    sample_config = {
        "camaras": [
            {
                "ip": "192.168.1.100",
                "usuario": "admin",
                "contrasena": "password",
                "tipo": "fija",
                "modelo": "Personas",
                "modelos": ["Personas"],
                "confianza": 0.1,
                "imgsz": 640,
                "device": "cuda",
                "resolucion": "sub",
                "fps_config": {
                    "visual_fps": 25,
                    "detection_fps": 8,
                    "ui_update_fps": 15
                }
            }
        ],
        "configuracion": {
            "fps_global": {
                "visual_fps": 25,
                "detection_fps": 8,
                "ui_update_fps": 15,
                "adaptive_fps": True
            }
        }
    }
    
    try:
        with open("config_example.json", "w") as f:
            json.dump(sample_config, f, indent=4)
        print("‚úÖ Archivo config_example.json creado")
        return True
    except Exception as e:
        print(f"‚ùå Error creando config de ejemplo: {e}")
        return False

def main():
    """Funci√≥n principal de pruebas"""
    print("üöÄ Iniciando pruebas completas de detecci√≥n YOLO\n")
    
    # Verificar CUDA
    cuda_ok = check_cuda_availability()
    
    # Verificar configuraci√≥n
    config_ok = test_config_file()
    
    # Verificar modelos
    models_ok = test_model_files()
    
    # Probar detecci√≥n b√°sica
    basic_ok = test_yolo_detection()
    
    # Probar con imagen real
    image_ok = test_image_loading()
    
    # Crear config de ejemplo
    example_ok = create_sample_config()
    
    print("\n" + "="*50)
    print("üìã RESUMEN DE PRUEBAS:")
    print(f"üñ•Ô∏è CUDA disponible: {'‚úÖ' if cuda_ok else '‚ùå'}")
    print(f"üìÑ Config v√°lido: {'‚úÖ' if config_ok else '‚ùå'}")
    print(f"üß† Modelos disponibles: {'‚úÖ' if models_ok else '‚ùå'}")
    print(f"üß™ Detecci√≥n b√°sica: {'‚úÖ' if basic_ok else '‚ùå'}")
    print(f"üñºÔ∏è Imagen de prueba: {'‚úÖ' if image_ok else '‚ùå'}")
    print(f"üìù Config ejemplo: {'‚úÖ' if example_ok else '‚ùå'}")
    
    if basic_ok and image_ok:
        print("\nüéâ Todas las pruebas pasaron! YOLO est√° funcionando correctamente.")
        print("üîß Si a√∫n no ves detecciones en la aplicaci√≥n, verifica:")
        print("   1. ‚úÖ La conexi√≥n del stream RTSP")
        print("   2. ‚úÖ El mapeo de coordenadas en paintEvent (corregido)")
        print("   3. ‚úÖ La configuraci√≥n de FPS (ahora configurable)")
        print("   4. ‚úÖ La confianza en config.json (reducir a 0.1)")
        print("\nüéØ Configuraciones recomendadas:")
        print("   ‚Ä¢ Confianza: 0.1 (para ver m√°s detecciones)")
        print("   ‚Ä¢ FPS Visual: 25-30")
        print("   ‚Ä¢ FPS Detecci√≥n: 8-10") 
        print("   ‚Ä¢ Modelo: yolov8n.pt o yolov8m.pt")
    else:
        print("\n‚ùå Algunas pruebas fallaron. Revisar:")
        print("   1. Instalaci√≥n de ultralytics: pip install ultralytics")
        print("   2. Conexi√≥n a internet para descargar modelos")
        print("   3. Configuraci√≥n de PyTorch/CUDA")
        print("   4. Permisos de archivo para escribir config")
    
    print("\nüí° Pasos siguientes:")
    print("   1. Ejecutar: python app.py")
    print("   2. Ir a Configuraci√≥n > Configurar FPS")
    print("   3. Usar configuraci√≥n 'Balanceado' para empezar")
    print("   4. Reducir confianza a 0.1 si no aparecen detecciones")
    
    print("="*50)

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"‚ùå Error en la prueba: {e}")
        sys.exit(1)

def test_image_loading():
    """Prueba de carga de imagen desde archivo"""
    print("\nüñºÔ∏è Probando carga de imagen desde archivo...")
    
    try:
        # Usar una imagen de ejemplo de internet
        from ultralytics import YOLO
        model = YOLO("yolov8n.pt")
        
        # Descargar y probar con imagen de ejemplo
        test_url = "https://ultralytics.com/images/bus.jpg"
        print(f"üåê Descargando imagen de prueba desde: {test_url}")
        
        results = model.predict(
            source=test_url,
            conf=0.25,
            save=False,
            show=False,
            verbose=True
        )
        
        if results and len(results) > 0:
            result = results[0]
            if result.boxes is not None:
                detections = len(result.boxes)
                print(f"‚úÖ Detecciones en imagen de prueba: {detections}")
                
                for i, box in enumerate(result.boxes):
                    x1, y1, x2, y2 = box.xyxy[0].tolist()
                    conf = float(box.conf[0])
                    cls = int(box.cls[0])
                    cls_name = result.names[cls] if hasattr(result, 'names') else f"class_{cls}"
                    print(f"  {i}: {cls_name} ({conf:.3f}) at ({x1:.0f},{y1:.0f},{x2:.0f},{y2:.0f})")
                
                return True
        
        print("‚ùå No se encontraron detecciones en la imagen de prueba")
        return False
        
    except Exception as e: